trigger: none
pr: none

resources:
  repositories:
  - repository: update
    type: github
    name: 'ullet-experiments/ado-github-signed-commits'
    endpoint: ullet
    ref: 'refs/heads/main'

pool:
  vmImage: ubuntu-latest

steps:
- checkout: update
  persistCredentials: true
  # Set a path that is NOT inside the default sources directory ($(Pipeline.Workspace)/s) so that
  # the files to be modified and committed to the repo are kept separate from any source files to be
  # used in a built. (Unless the modified file is part of the source to be built, e.g. modifying
  # a config file to update a version string, and want to commit that change on a successful build).
  # Path must be relative to $(Pipeline.Workspace). It can't be a rooted directory.
  path: 'update'

- task: PowerShell@2
  displayName: Update file in GIT repository
  inputs:
    targetType: 'inline'
    script: |
      # User email and name must be set to be able to commit.
      # Can't use email address in 'Build.RequestedForEmail' because this may be a private email
      # address (e.g. Joe.Blogs@mywork.com), and the user may have set up their GitHub account to
      # prevent their private email address from being used in a commit.
      # Use a generic placeholder email address (preferably a domain you own in a real application)
      git config user.email "automation@example.com"
      git config user.name "$(Build.RequestedFor)"

      # Pipeline checkout always results in a 'detached HEAD' state.
      # Need to switch to a branch before can commit any files.
      git fetch --all
      git switch main

      $timeStamp = Get-Date -AsUTC -Format "yyyy-MM-ddTHH:mm:ssZ"
      $logEntry = "${timeStamp}: $(Build.BuildId), $(Build.BuildNumber), $(Build.Reason), $(Build.SourceBranch), $(Build.SourceVersion)"
      $logEntry | Out-File -Append -FilePath log.txt

      git add log.txt
      git commit -m "Update log" -m "[skip ci]"
      git push
    pwsh: true
    # Don't use 'Build.Repository.LocalPath' or 'Build.SourcesDirectory' as those variables depend
    # on whether multiple repositories have been checked out (e.g. might also 'checkout: self').
    # Set the working directory path to the path used in 'checkout'.
    workingDirectory: '$(Pipeline.Workspace)/update'
